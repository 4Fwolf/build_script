#!/bin/bash
# ================================Vars==================================
curdir=`pwd`
toolchaindir='../android-ndk/toolchains/arm-linux-androideabi-4.6/bin/arm-linux-androideabi-'
mediatek='../mediatek'
kitchen='../kitchen'
outdir='../build_out'
project='signal75_jb'
initram='BOOT-EXTRACTED_jb'
upddir='Update_jb'
kernvers='[3.4.0]'
drv='platform/mt6577/kernel/drivers/gpu'
module='pvrsrvkm.ko'
#========================================================================

# ================================Exports==================================
export ARCH=arm
export CROSS_COMPILE=~/build/android-ndk/toolchains/arm-linux-androideabi-4.6/bin/arm-linux-androideabi-
export PROJECT=signal75_jb
export TARGET_PRODUCT=signal75_jb
export CONFIG_INITRAMFS_SOURCE=~/build/boot.img-ramdisk
#========================================================================

# ================================Usage==================================
usage(){
echo " "
echo "======================================"
echo "Usage: ./mk <x> <y>"
echo " "
echo "	<x>:=========="
echo "		n    -new build"
echo "		r    -rebuild"
echo "	<y>:=========="
echo "		k   -build kernel only"
echo "		m   -build modules only"
echo "		mm  -build modules with drv_list"
echo "		bs  -build project"
echo "		bm  -build project with drv_list"
echo "======================================"
echo "	[./mk c]    -clean source tree"
echo "======================================"
echo " "
}
#========================================================================

# ================================Clean==================================
clean(){
echo " "
echo "=============================================================="
echo "Cleaning build tree:"
echo "=============================================================="
echo " "
./build.sh mrproper
echo " "
echo " "
echo " "
echo "=============================================================="
echo "Cleaning done succesfully!"
echo "=============================================================="
echo " "
}
#========================================================================

# ===========================Make build with "drivers list"===========================
mkbuild_multi(){
LINE_NUMBER=1
ENDING=$(grep -c $ drv_list)
for LINE_NUMBER in $(seq 1 $ENDING);
do

echo " "
echo "=============================================================="
echo "Starting build project"
echo "=============================================================="
echo " "

DRIVER_NAME=$(sed $LINE_NUMBER!d drv_list)
echo " "
echo "============Changing driver: $DRIVER_NAME"
echo "Working on driver" $LINE_NUMBER "of" $ENDING "named" $DRIVER_NAME
cp -f "$mediatek"/config/"$project"/ProjectConfigVANILLA.mk "$mediatek"/config/"$project"/ProjectConfig.mk
find "$mediatek"/config/"$project"/ -name "ProjectConfig.mk" -exec sed -i~ "s/VANILLA/$DRIVER_NAME/g" {} \+ 

echo " "
echo "============Building:"
./build.sh release | tee "$outdir"/log.txt

echo " "
echo "============Copiyng kernel:"
cp -R "$kitchen"/"$initram" "$kitchen"/BOOT-EXTRACTED
cp -R "$curdir"/arch/arm/boot/zImage "$kitchen"/BOOT-EXTRACTED/zImage

echo " "
echo "============Making boot.img:"
cp -R "$kitchen"/boot.img "$kitchen"/WORKING_kernel/boot.img
cd "$kitchen"
./menu

path="kernel-$kernvers-`date +%F_%H-%M`"

echo " "
echo "============Copiyng boot.img:"
mkdir -p "$outdir"/"$path""(""$DRIVER_NAME"")"/modules
mkdir -p "$outdir"/"$path""(""$DRIVER_NAME"")"/striped_modules
touch "$outdir"/"$path""(""$DRIVER_NAME"")"/info.txt
mv -f "$outdir"/log.txt "$outdir"/"$path""(""$DRIVER_NAME"")"/log.txt
cp -R "$outdir"/"$upddir" "$outdir"/"$path""(""$DRIVER_NAME"")"/Update
cp -R "$kitchen"/WORKING_kernel/boot.img "$outdir"/"$path""(""$DRIVER_NAME"")"/Update/boot.img
cp -R "$kitchen"/WORKING_kernel/boot.img "$outdir"/"$path""(""$DRIVER_NAME"")"/boot.img
cp -R "$curdir"/arch/arm/boot/zImage "$outdir"/"$path""(""$DRIVER_NAME"")"/zImage

echo " "
echo "============Making recovery.img:"
cp -R "$kitchen"/BOOT-EXTRACTED_rec "$kitchen"/BOOT-EXTRACTED
cp -R "$curdir"/arch/arm/boot/zImage "$kitchen"/BOOT-EXTRACTED/zImage
cp -R "$kitchen"/cwm.img "$kitchen"/WORKING_kernel/boot.img
cd "$kitchen"
./menu

echo " "
echo "============Copiyng recovery.img:"
cp -R "$kitchen"/WORKING_kernel/boot.img "$outdir"/"$path""(""$DRIVER_NAME"")"/recovery.img

echo " "
echo "============Copiyng modules:"
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")"/Update/system/lib/modules \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")"/Update/system/lib/modules \;
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")"/modules \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")"/modules \;
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")"/striped_modules \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")"/striped_modules \;

echo " "
echo "============Striping modules:"
"$toolchaindir"strip -g -S -d --strip-unneeded -x -I elf32-littlearm -O elf32-littlearm "$outdir"/"$path"/Update/system/lib/modules/*.ko
"$toolchaindir"strip -g -S -d --strip-unneeded -x -I elf32-littlearm -O elf32-littlearm "$outdir"/"$path"/striped_modules/*.ko

echo " "
echo "============Making *Update.zip* :"
cd "$outdir"/"$path""(""$DRIVER_NAME"")"/Update
zip -r Update.zip boot.img
zip -r Update.zip system
zip -r Update.zip META-INF

echo " "
echo " "
echo " "
echo "=============================================================="
echo "Build done succesfully!"
echo "=============================================================="
echo " "
done
}
#========================================================================


# ===========================Make simple build===========================
mkbuild_simple(){
echo " "
echo "=============================================================="
echo "Starting build project"
echo "=============================================================="
echo " "

echo " "
echo "============Building:"
./build.sh release | tee "$outdir"/log.txt

echo " "
echo "============Copiyng kernel:"
cp -R "$kitchen"/"$initram" "$kitchen"/BOOT-EXTRACTED
cp -R "$curdir"/arch/arm/boot/zImage "$kitchen"/BOOT-EXTRACTED/zImage

echo " "
echo "============Making boot.img:"
cp -R "$kitchen"/boot.img "$kitchen"/WORKING_kernel/boot.img
cd "$kitchen"
./menu

path="kernel-$kernvers-`date +%F_%H-%M`"

echo " "
echo "============Copiyng boot.img:"
mkdir -p "$outdir"/"$path"/modules
mkdir -p "$outdir"/"$path"/striped_modules
touch "$outdir"/"$path"/info.txt
mv -f "$outdir"/log.txt "$outdir"/"$path"/log.txt
cp -R "$outdir"/"$upddir" "$outdir"/"$path"/Update
cp -R "$kitchen"/WORKING_kernel/boot.img "$outdir"/"$path"/Update/boot.img
cp -R "$kitchen"/WORKING_kernel/boot.img "$outdir"/"$path"/boot.img
cp -R "$curdir"/arch/arm/boot/zImage "$outdir"/"$path"/zImage

echo " "
echo "============Making recovery.img:"
cp -R "$kitchen"/BOOT-EXTRACTED_rec "$kitchen"/BOOT-EXTRACTED
cp -R "$curdir"/arch/arm/boot/zImage "$kitchen"/BOOT-EXTRACTED/zImage
cp -R "$kitchen"/cwm.img "$kitchen"/WORKING_kernel/boot.img
cd "$kitchen"
./menu

echo " "
echo "============Copiyng recovery.img:"
cp -R "$kitchen"/WORKING_kernel/boot.img "$outdir"/"$path"/recovery.img

echo " "
echo "============Copiyng modules:"
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path"/Update/system/lib/modules \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path"/Update/system/lib/modules \;
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path"/modules \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path"/modules \;
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path"/striped_modules \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path"/striped_modules \;

echo " "
echo "============Striping modules:"
"$toolchaindir"strip -g -S -d --strip-unneeded -x -I elf32-littlearm -O elf32-littlearm "$outdir"/"$path"/Update/system/lib/modules/*.ko
"$toolchaindir"strip -g -S -d --strip-unneeded -x -I elf32-littlearm -O elf32-littlearm "$outdir"/"$path"/striped_modules/*.ko

echo " "
echo "============Making *Update.zip* :"
cd "$outdir"/"$path"/Update
zip -r Update.zip boot.img
zip -r Update.zip system
zip -r Update.zip META-INF

echo " "
echo " "
echo " "
echo "=============================================================="
echo "Build done succesfully!"
echo "=============================================================="
echo " "
}
#========================================================================

# ===========================Make only kernel============================
mkkernel(){
echo " "
echo "=============================================================="
echo "Starting build kernel"
echo "=============================================================="
echo " "

echo " "
echo "============Building:"
make -j3 zImage | tee "$outdir"/log.txt

echo " "
echo "============Copiyng kernel:"
cp -R "$kitchen"/"$initram" "$kitchen"/BOOT-EXTRACTED
cp -R "$curdir"/arch/arm/boot/zImage "$kitchen"/BOOT-EXTRACTED/zImage

echo " "
echo "============Making boot.img:"
cp -R "$kitchen"/boot.img "$kitchen"/WORKING_kernel/boot.img
cd "$kitchen"
./menu

path="kernel_and_recovery-$kernvers-`date +%F_%H-%M`"

echo " "
echo "============Copiyng boot.img:"
mkdir -p "$outdir"/"$path"
touch "$outdir"/"$path"/info.txt
mv -f "$outdir"/log.txt "$outdir"/"$path"/log.txt
cp -R "$kitchen"/WORKING_kernel/boot.img "$outdir"/"$path"/boot.img
cp -R "$curdir"/arch/arm/boot/zImage "$outdir"/"$path"/zImage

echo " "
echo "============Making recovery.img:"
cp -R "$kitchen"/BOOT-EXTRACTED_rec "$kitchen"/BOOT-EXTRACTED
cp -R "$curdir"/arch/arm/boot/zImage "$kitchen"/BOOT-EXTRACTED/zImage
cp -R "$kitchen"/cwm.img "$kitchen"/WORKING_kernel/boot.img
cd "$kitchen"
./menu

echo " "
echo "============Copiyng recovery.img:"
cp -R "$kitchen"/WORKING_kernel/boot.img "$outdir"/"$path"/recovery.img

echo " "
echo " "
echo " "
echo "=============================================================="
echo "Build done succesfully!"
echo "=============================================================="
echo " "
}
#========================================================================

# ===========================Make only modules===========================
mkmodules(){
echo " "
echo "=============================================================="
echo "Starting build modules"
echo "=============================================================="
echo " "

echo " "
echo "============Building:"
make -j3 modules | tee "$outdir"/log.txt

path="modules-$kernvers-`date +%F_%H-%M`"

echo " "
echo "============Copiyng modules:"
mkdir -p "$outdir"/"$path"/orig
mv -f "$outdir"/log.txt "$outdir"/"$path"/log.txt
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path" \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path" \;
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path"/orig \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path"/orig \;

echo " "
echo "============Striping modules:"
"$toolchaindir"strip -g -S -d --strip-unneeded -x -I elf32-littlearm -O elf32-littlearm "$outdir"/"$path"/*.ko

echo " "
echo " "
echo " "
echo "=============================================================="
echo "Build done succesfully!"
echo "=============================================================="
echo " "
}
#========================================================================

# ===========================Make modules with drv_list===========================
mkmodulesm(){
LINE_NUMBER=1
ENDING=$(grep -c $ drv_list)
touch "$outdir"/size_modules.txt
echo "size	module		driver" > "$outdir"/size_modules.txt
for LINE_NUMBER in $(seq 1 $ENDING);
do
echo " "
echo "=============================================================="
echo "Starting build modules"
echo "=============================================================="
echo " "

DRIVER_NAME=$(sed $LINE_NUMBER!d drv_list)
echo " "
echo "============Changing driver: $DRIVER_NAME"
echo "Working on driver" $LINE_NUMBER "of" $ENDING "named" $DRIVER_NAME
rm -R "$mediatek"/"$drv"
cp -R ../"$DRIVER_NAME"/"$drv" "$mediatek"/"$drv"

echo " "
echo "============Building:"
make -j3 modules | tee "$outdir"/log.txt

path="modules-$kernvers-`date +%F_%H-%M`"

echo " "
echo "============Copiyng modules:"
mkdir -p "$outdir"/"$path""(""$DRIVER_NAME"")"/orig
mv -f "$outdir"/log.txt "$outdir"/"$path""(""$DRIVER_NAME"")"/log.txt
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")" \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")" \;
find "$curdir" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")"/orig \;
find "$mediatek" -name "*.ko" -exec cp '{}' "$outdir"/"$path""(""$DRIVER_NAME"")"/orig \;

echo " "
echo "============Striping modules:"
"$toolchaindir"strip -g -S -d --strip-unneeded -x -I elf32-littlearm -O elf32-littlearm "$outdir"/"$path""(""$DRIVER_NAME"")"/*.ko

echo " "
echo "============Checking size:"
cd "$outdir"/"$path""(""$DRIVER_NAME"")"/
sz=`du -b $module`
sed -i "\$i$sz""	""$DRIVER_NAME" ../size_modules.txt

#TODO for checking size with originals
#cd "$outdir"/modules_original/
#sz1=`du -b pvrsrvkm.ko`
#echo "$sz"
#echo "$sz1"
#if [ "$sz" = "$sz1" ];then
#echo "YES"
#exit 0
#exit 0
#exit 0
#else
#echo "NO"
#fi

cd "$curdir"

echo " "
echo " "
echo " "
echo "=============================================================="
echo "Build done succesfully!"
echo "=============================================================="
echo " "
clean
done
}
#========================================================================

# ================================Flashing==================================
flash(){
adb push "$outdir"/"$path"/Update/Update.zip /mnt/sdcard/Update.zip
adb reboot recovery
echo "flash recovery 2?"
read -n 1
adb shell /sbin/recovery —update_package=/sdcard/Update.zip
}
#========================================================================

# ================================Main==================================
case "$1" in
	n)
		clean
		case "$2" in
			k)
				start=`date +%H-%M`
				mkkernel
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			m)
				start=`date +%H-%M`
				mkmodules
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			mm)
				start=`date +%H-%M`
				mkmodulesm
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			bs)
				start=`date +%H-%M`
				mkbuild_simple
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			bm)
				start=`date +%H-%M`
				mkbuild_multi
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			*)
				usage
			;;
		esac
	;;
	r)
		case "$2" in
			k)
				start=`date +%H-%M`
				mkkernel
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			m)
				start=`date +%H-%M`
				mkmodules
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			mm)
				start=`date +%H-%M`
				mkmodulesm
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			bs)
				start=`date +%H-%M`
				mkbuild_simple
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;;
			bm)
				start=`date +%H-%M`
				mkbuild_multi
				end=`date +%H-%M`
				echo "Start: $start"
				echo "End: $end"
			;; 
			*)
				usage
			;;
		esac
	;;
	c)
		clean
	;;
	*)
		usage
	;;	
esac
#========================================================================
